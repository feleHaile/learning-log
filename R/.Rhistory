install.packages('vegan')
library(vegan)
data(dune)
summary(dune)
dim(dune)
summary(dune.env) #recheck data to confirm change
data(dune.env)   #dune environmental data is a loaded data set in Vegan
dune.env
summary(dune.env)
class(dune.env$Moisture)
class(dune.env$Manure)
dune.env$Moisture <- as.numeric(dune.env$Moisture)
dune.env$Manure<- as.numeric(dune.env$Manure)
summary(dune.env) #recheck data to confirm change
library(vegan)
ord <- cca(dune)    #run CA on dune and assign to CA object
ord  #provides some basic stats on the CA ordination including inertia and eigenvalues
summary(ord)    #provides more extensive stats on CA object including species and site scores along axes
plot(ord)    #plot function recognises CA objects and plots accordingly
plot(ord, type = "n")
points(ord, display = "sites", cex = 0.8, pch=21, col="red", bg="yellow")
text(ord, display = "spec", cex=0.7, col="blue")
axisscores<-scores(ord, choices=c(1,2,3,4))
ord.fit<-envfit(ord, dune.env, perm=1000)
ord.fit
plot(ord)
plot(ord.fit, add = T, p. = 0.05)
ord.fit
plot(ord, dis="site")
plot(ord.fit)
ord.fit
ord2 <- cca(dune ~ A1 + Management, data=dune.env)
ord2
summary(ord2)
plot(ord2) #the plot function produces a triplot of env data, species and sites
plot(ord2) #the plot function produces a triplot of env data, species and sites
ord2<-cca(dune ~ ., data=dune.env)
anova(ord2)
anova(ord2, by="term", perm=500)
mod1 <- cca(dune ~ ., data=dune.env)
mod1
mod0 <- cca(dune ~ 1, dune.env)
mod <- step(mod0, scope = formula(mod1), test = "perm")
mod
cor(dune.env$Moisture,dune.env$A1)
ord <- decorana(dune)    #run DCA on dune and assign to DCA object
summary(ord)    #provides summary stats on DCA object
plot(ord)    #plot function recognises DCA objects and plots accordingly
windows() #function to make an extra graphics window in windows-based operating systems
ord <- cca(dune)    #run CA on dune and assign to CA object
plot(ord)
ord <- rda(dune)
ord
summary(ord)
plot(ord)
ord2 <- rda(dune, scale = TRUE)
ord2
summary(ord2)
windows()
plot(ord2)
biplot(ord)
ord.fit<-envfit(ord, dune.env, perm=1000)
ord.fit
dune.mds <- metaMDS(dune)
variableScores <- dune.mds $species
sampleScores <- dune.mds $points #site scores
variableScores
sampleScores
plot(dune.mds)
windows()
plot(dune.mds, display ="sites")
text(dune.mds, display ="sites")
plot(dune.mds, display ="species")
text(dune.mds, display ="species")
plot(dune.mds, symbol='n')
text(dune.mds, display ="species")
ef<-envfit(dune.mds, dune.env, permu = 999)
ef
plot(dune.mds, display ="sites")
plot(ef, p.max = 0.05)  # only show significant environmental variables for ordination
text(dune.mds, display ="sites")
nbinom(4,p=0.5)
??nbinom
binom(4,20,p=0.5)
dbinom(4,20,p=0.5)
library(RCurl)
veresion
version
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
spsspkg.GetSPSSVersion()
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
kingstimeseries <- ts(kings)
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthtimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
birthtimeseries
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(kingstimeseries)
plot.ts(souvenirtimeseries)
logsourvenirtimeseries <- log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(logsourvenirtimeseries)
library("TTR")
install.packages9'TTR)')
install.packages('TTR')
library(TTR)
birthstimeseriescomponents <- decompose(birthstimeseries)
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
kingstimeseriesSMA3 <- SMA(kingstimeseries,n=3)
plot.ts(kingstimeseriesSMA3)
kingstimeseriesSMA8 <- SMA(kingstimeseries,n=8)
plot.ts(kingstimeseriesSMA8)
birthstimeseriescomponents <- decompose(birthstimeseries)
plot(birthstimeseriescomponents)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
rainseriesforecasts$fitted
plot(rainseriesforecasts)
rainseriesforecasts$SSE
HoltWinters(rainseries, beta=FALSE, gamma=FALSE, l.start=23.56)
install.packages('forecast')
library('forecast')
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
rainseriesforecasts2
rainseriesforecasts2
plot.forecast(rainseriesforecasts2)
acf(rainseriesforecasts2$residuals, lag.max=20)
??acf
library(forecast)
acf(rainseriesforecasts2$residuals, lag.max=20)
plot.forecast(rainseriesforecasts2)
rainseriesforecasts2$residuals
acf(rainseriesforecasts2$residuals, lag.max=20)
acf(rainseriesforecasts2$residuals)
acf(rainseriesforecasts2$residuals, lag.max=20, type = "Ljung-Box")
acf(rainseriesforecasts2$residuals, lag.max=20, type = "correlation")
??acf
acf(rainseriesforecasts2)
acf(rainseriesforecasts2$residuals)
acf(na.omit(rainseriesforecasts2$residuals), lag = 20, type = "Ljung-Box")
acf(na.omit(rainseriesforecasts2$residuals), lag = 20, type = "correlation")
plot.ts(rainseriesforecasts2$residuals)
plot.ts(skirtsseriesforecasts2$residuals)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesforecasts <- HoltWinters(skirtsseries, gamma=FALSE)
skirtsseriesforecasts
install.packages('bioconductor')
install.packages('Bioconductor')
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='healthspan', token='6E0A1CF0AF98AF1B63A4CBAAFCDDCA66',
secret='7bs1nSq3G3lzc8d5FebpOaiHRi3NmI+R/bdbOYnV')
library(rsconnect)
rsconnect::setAccountInfo(name='healthspan', token='6E0A1CF0AF98AF1B63A4CBAAFCDDCA66',
secret='7bs1nSq3G3lzc8d5FebpOaiHRi3NmI+R/bdbOYnV')
rsconnect::deployApp('Q:\\HealthSpan\\Progress Reports\\dashboardProject\\healthspanDashboard1.R')
rsconnect::deployApp('Q:\\HealthSpan\\Progress Reports\\dashboardProject\\healthspanDashboard1.Rmd')
install.packages('rmarkdown')
rsconnect::deployApp('Q:\\HealthSpan\\Progress Reports\\dashboardProject\\healthspanDashboard1.Rmd')
rsconnect::deployApp('Q:\\HealthSpan\\Progress Reports\\dashboardProject')
library(xlsx)
install.packages('rJava')
library(rJava)
GIT repository access
The GIT repository for this project can be cloned using
git clone --recursive https://github.com/s-u/rJava.git rJava
see also rJava GitHub repository.
To install the latest development snapshot of this package, use
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
library(rJava)
install.packages('rJava')
install.packages('rJava', type = 'source')
pk <- 'rJava'
download.packages(pk, "R-3.2-packages/" ,type = "win.binary")
install.packages(
dir("R-3.2-packages/",pattern=pk,full.names = TRUE),
repos = NULL,
type = "source")
install.packages('rJava',,'http://www.rforge.net/')
library(xlsx)
library(xlsx)
install.packages('rJava')
library(rJava)
install.packages('rJava')
install.packages('rJava')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
library(rJava)
remove.packages('rJava')
install.packages('rJava')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111')
library(rJava)
install.packages('rJava')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111\\bin')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111\\bin\\client')
library(rJava)
library(xlsx)
remove.packages('rJava')
remove.packages('rJava')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111\\bin\\client')
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rJava)
setwd("C:\\Users\\JYESOH\\Desktop\\GIT\\useful.scripts\\R")
library(ggplot2)
housing <- read.csv("datasets\\landdata-states.csv", header=T)
housing$Year <- as.numeric(substr(housing$Date, 1, 4))
housing$Qrtr <- as.numeric(substr(housing$Date, 6, 6))
housing$Date <- housing$Year + housing$Qrtr/4
housing$Home.Value <- gsub("\\$", '', housing$Home.Value)
housing$Home.Value <- as.numeric(gsub("\\,", '', housing$Home.Value))
housing$Structure.Cost <- gsub("\\$", '', housing$Structure.Cost)
housing$Structure.Cost <- as.numeric(gsub("\\,", '', housing$Structure.Cost))
housing$Land.Value <- gsub("\\$", '', housing$Land.Value)
housing$Land.Value <- as.numeric(gsub("\\,", '', housing$Land.Value))
# renaming columns
colnames(housing) <- c("State", "Date", "Home.Value", "Structure.Cost", "Land.Value", "Land.Share", "Home.Price.Index", "Land.Price.Index")
# plotting histogram
hist(housing$Home.Value) # base
ggplot(housing, aes(x = Home.Value)) + geom_histogram() # ggplot
# plotting values
# with base
plot(Home.Value ~ Date,
data=subset(housing, State == "MA"))
points(Home.Value ~ Date, col="red",
data=subset(housing, State == "TX"))
legend(19750, 400000,
c("MA", "TX"), title="State",
col=c("black", "red"),
pch=c(1, 1))
# with ggplot2
roundUp <- function(x) 10^ceiling(log10(x))
maximum <- roundUp(max(housing$Home.Value))
intervals <- maximum/10
ggplot(subset(housing, State %in% c("MA", "TX")),
aes(x=Date,
y=Home.Value,
color=State)) + geom_point()
plot(Home.Value ~ Date,
data=subset(housing, State == "MA"))
points(Home.Value ~ Date, col="red",
data=subset(housing, State == "TX"))
legend(19750, 400000,
c("MA", "TX"), title="State",
col=c("black", "red"),
pch=c(1, 1))
ggplot(subset(housing, State %in% c("MA", "TX")),
aes(x=Date,
y=Home.Value,
color=State)) + geom_point()
hp2001Q1 <- subset(housing, Date == 2001.25)
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = Land.Value)) +
geom_point()
ma.tx.housing <- subset(housing, State %in% c("MA", "TX"))
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_point()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_area()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_bar()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_bin2d()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_boxplot()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_contour()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_count()
ggplot(ma.tx.housing,
aes(x=Date,
y=Home.Value,
color=State)) + geom_crossbar()
p1 + geom_point(aes(color = Home.Value)) +
geom_line(aes(y = pred.SC))
# data manipulation
housing$Year <- as.numeric(substr(housing$Date, 1, 4))
housing$Qrtr <- as.numeric(substr(housing$Date, 6, 6))
housing$Date <- housing$Year + housing$Qrtr/4
housing$Home.Value <- gsub("\\$", '', housing$Home.Value)
housing$Home.Value <- as.numeric(gsub("\\,", '', housing$Home.Value))
housing$Structure.Cost <- gsub("\\$", '', housing$Structure.Cost)
housing$Structure.Cost <- as.numeric(gsub("\\,", '', housing$Structure.Cost))
housing$Land.Value <- gsub("\\$", '', housing$Land.Value)
housing$Land.Value <- as.numeric(gsub("\\,", '', housing$Land.Value))
# renaming columns
colnames(housing) <- c("State", "Date", "Home.Value", "Structure.Cost", "Land.Value", "Land.Share", "Home.Price.Index", "Land.Price.Index")
# plotting histogram
hist(housing$Home.Value) # base
ggplot(housing, aes(x = Home.Value)) + geom_histogram() # ggplot
hp2001Q1 <- subset(housing, Date == 2001.25)
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = Land.Value)) +
geom_point()
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = log(Land.Value))) +
geom_point()
hp2001Q1$pred.SC <- predict(lm(Structure.Cost ~ log(Land.Value), data = hp2001Q1))
p1 <- ggplot(hp2001Q1, aes(x = log(Land.Value), y = Structure.Cost))
p1 + geom_point(aes(color = Home.Value)) +
geom_line(aes(y = pred.SC))
p1 +
geom_text(aes(label=State), size = 3)
p1 +
geom_point(aes(color = Home.Value)) +
geom_smooth()
p1 + geom_point(aes(color = Home.Value)) +
geom_line(aes(y = pred.SC))
library(ggrepel)
geom_point() +
p1 +
geom_point() +
geom_text_repel(aes(label=State), size = 3)
p1 +
geom_point() +
geom_text_repel(aes(label=State), size = 3)
names(hp2001Q1)
p1 +
geom_point() +
geom_text_repel(aes(label=State), size = 3)
p1 +
geom_point(aes(color=Home.Value, shape = region))
names(hp2001Q1)
p1 +
geom_point(aes(color=Home.Value, shape = State))
install.package('xkcd')
install.packages('xkcd')
library(xkcd)
library(xkcd)
p1 +
geom_point() +
xkcdaxis(xrange, yrange)
p1 +
geom_point()
p1 +
geom_point() +
xkcdaxis(c(0, 12), c(80000, 140000))
housing$Year <- as.numeric(substr(housing$Date, 1, 4))
housing$Qrtr <- as.numeric(substr(housing$Date, 6, 6))
housing$Date <- housing$Year + housing$Qrtr/4
housing$Home.Value <- gsub("\\$", '', housing$Home.Value)
housing$Home.Value <- as.numeric(gsub("\\,", '', housing$Home.Value))
housing$Structure.Cost <- gsub("\\$", '', housing$Structure.Cost)
housing$Structure.Cost <- as.numeric(gsub("\\,", '', housing$Structure.Cost))
housing$Land.Value <- gsub("\\$", '', housing$Land.Value)
housing$Land.Value <- as.numeric(gsub("\\,", '', housing$Land.Value))
# renaming columns
colnames(housing) <- c("State", "Date", "Home.Value", "Structure.Cost", "Land.Value", "Land.Share", "Home.Price.Index", "Land.Price.Index")
head(housing)
housing <- read.csv("datasets\\landdata-states.csv", header=T)
housing
head(housing)
housing$Year <- as.numeric(substr(housing$Date, 1, 4))
head(housing)
housing$Qrtr <- as.numeric(substr(housing$Date, 6, 6))
head(housing)
housing$Date <- housing$Year + housing$Qrtr/4
head(housing)
housing$Home.Value <- gsub("\\$", '', housing$Home.Value)
housing$Date
head(housing)
housing$Home.Value <- as.numeric(gsub("\\,", '', housing$Home.Value))
head(housing)
housing$Land.Value <- gsub("\\$", '', housing$Land.Value)
head(housing)
head(housing)
colnames(housing) <- c("State", "Date", "Home.Value", "Structure.Cost", "Land.Value", "Land.Share", "Home.Price.Index", "Land.Price.Index", "year", "quarter")
head(housing)
colnames(housing) <- c("State", "Date", "Home.Value", "Structure.Cost", "Land.Value", "Land.Share", "HPI", "LPI", "year", "quarter")
head(housing)
ggplot(dat, aes(x = LDI, y = HDI)) +
geom_point()
ggplot(housing, aes(x = LDI, y = HDI)) +
geom_point()
ggplot(housing, aes(x = HPI, y = LPI)) +
geom_point()
ggplot(housing, aes(x = HPI, y = LPI)) +
geom_point(color="blue")
ggplot(housing, aes(x = HPI, y = LPI)) +
geom_point(color=State)
housing$State
ggplot(housing, aes(x = HPI, y = LPI)) +
geom_point(color=State)
ggplot(housing, aes(x = HPI, y = LPI)) +
geom_point(color = State)
